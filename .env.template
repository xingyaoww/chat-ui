# template used in production for HuggingChat.

MODELS=`[
    {   
        "endpoints": [
          {
            "type": "tgi",
            "url": "TODO_TGI_URL"
          }
        ],
        "name": "CodeActAgent",
        "websiteUrl": "https://huggingface.co/xingyaoww/CodeActAgent-Mistral-7b-v0.1",

        "userMessageToken": "<|im_start|>user\n",
        "userMessageEndToken": "<|im_end|>",
        "assistantMessageToken": "<|im_start|>assistant\n",
        "assistantMessageEndToken": "<|im_end|>",
        "preprompt": "<|im_start|>system\nA chat between a curious user and an artificial intelligence assistant. The assistant gives helpful, detailed, and polite answers to the user's questions. When needed, the assistant can interact with a Python programming environment and receive the corresponding output. The code should be enclosed using \"<execute>\" tag, for example: <execute> print(\"Hello World!\") </execute>. Always use Python to perform arithmetic calculation to ensure correctness.\nYou should stop <execute> and provide an answer when you have already obtain the answer from execution result.\nTool function available (already imported in <execute> environment):\n[1] google_search(query: str, num_results: int = 1) -> dict\nSearch google for the given query.\nFor example: \"<execute>\"google_search(\"Hello world\") \"</execute>\"\n[2] get_url_content(url: str) -> str\nGet content from URL. You can use this when you want to access more information from an URL.\n[3] get_url_html(url: str) -> str\nGet HTML from URL (could be messy).<|im_end|>",
        "parameters": {
          "temperature": 0.5,
          "top_p": 0.95,
          "truncate": 31744,
          "max_new_tokens": 1024,
          "stop": ["<|im_start|>", "<|im_end|>", "</execute>"]
        },
        "promptExamples": [
          {
            "title": "Write an email from bullet list",
            "prompt": "As a restaurant owner, write a professional email to the supplier to get these products every week: \n\n- Wine (x10)\n- Eggs (x24)\n- Bread (x12)"
          }, {
            "title": "Code a snake game",
            "prompt": "Code a basic snake game in python, give explanations for each step."
          }, {
            "title": "Assist in a task",
            "prompt": "How do I make a delicious lemon cheesecake?"
          }
        ]
    }
]`

OLD_MODELS=`[]`

TASK_MODEL=

APP_BASE=""

PUBLIC_ORIGIN=#https://huggingface.co
PUBLIC_SHARE_PREFIX=#https://hf.co/chat
PUBLIC_ANNOUNCEMENT_BANNERS=`[
    {
    "title": "CodeActAgent is open-sourced now!",
    "linkTitle": "Check it out!",
    "linkHref": "https://huggingface.co/xingyaoww/CodeActAgent-Mistral-7b-v0.1"
  }
]`

PUBLIC_APP_NAME=CodeActAgent # name used as title throughout the app
PUBLIC_APP_ASSETS=chatui # used to find logos & favicons in static/$PUBLIC_APP_ASSETS
PUBLIC_APP_COLOR=black #blue # can be any of tailwind colors: https://tailwindcss.com/docs/customizing-colors#default-color-palette
PUBLIC_APP_DESCRIPTION="Meet CodeAct Agent: Your versatile open-source LLM that not only chats but also writes and executes Python code for you." # description used throughout the app (if not set, a default one will be used)
PUBLIC_APP_DATA_SHARING=1
PUBLIC_APP_DISCLAIMER=1
LLM_SUMMERIZATION=true

MONGODB_URL=TODO_MONGODB_URL
MONGODB_DB_NAME=CodeActAgent
MONGODB_DIRECT_CONNECTION=false
JUPYTER_API_URL=TODO_JUPYTER_API_URL
N_EXECUTION_LIMIT=5 # Number of turns allowed for LLM's self-execution.


RATE_LIMIT=
MESSAGES_BEFORE_LOGIN=# how many messages a user can send in a conversation before having to login. set to 0 to force login right away

PUBLIC_GOOGLE_ANALYTICS_ID=#

# Not part of the .env but set as other variables in the space
# ADDRESS_HEADER=X-Forwarded-For
# XFF_DEPTH=2
